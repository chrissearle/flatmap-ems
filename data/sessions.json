[
    {
        "format": "presentation",
        "state": "approved",
        "slug": "living_in_a-post-functional_world",
        "event": "2013",
        "title": "Living in a Post-Functional World",
        "language": "en",
        "room": "track1",
        "slot": "13-slot1",
        "body": "\"Functional Programming\" is the modern received wisdom regarding program and language design. All the cool kids talk about writing code that is \"functional\" or even \"purely functional\". However, functional programming as it is traditionally defined really doesn't cut the mustard, and if you look at how modern functional architectures are being shaped, everyone seems to have tacitly arrived at the same conclusion: more is needed.\n\nIn this talk, we will look at how modern functional languages like Scala, Clojure and even Haskell have evolved beyond the simple paradigms of the lambda calculus. We will see how the industry has really moved beyond functional programming and into the realm of something more powerful, more expressive and better suited to the task of large application architecture.",
        "speakers": [
            {
                "name": "Daniel Spiewak",
                "slug": "daniel_spiewak",
                "bio": "Daniel Spiewak is a software developer based out of Boulder, CO. Over the years, he has worked with Java, Scala, Ruby, C/C++, ML, Clojure and several experimental languages. He currently spends most of his free time researching parser theory and methodologies, particularly areas where the field intersects with functional language design, domain-specific languages and type theory.\n\nDaniel has written a number of articles on his weblog, Code Commit, including his popular introductory series, Scala for Java Refugees."
            }
        ]
    }
]
